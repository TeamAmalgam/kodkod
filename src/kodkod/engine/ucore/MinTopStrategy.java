/* 
 * Kodkod -- Copyright (c) 2005-2008, Emina Torlak
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package kodkod.engine.ucore;

import java.util.Iterator;

import kodkod.engine.fol2sat.TranslationLog;
import kodkod.engine.fol2sat.Translator;
import kodkod.engine.satlab.Clause;
import kodkod.engine.satlab.ReductionStrategy;
import kodkod.engine.satlab.ResolutionTrace;
import kodkod.util.ints.IntBitSet;
import kodkod.util.ints.IntIterator;
import kodkod.util.ints.IntSet;
import kodkod.util.ints.Ints;

/**
 * A strategy for generating unsat cores that are minimal at the logic level.  
 * Specifically, let C be a core that is minimal according to this strategy, 
 * and let F(C) be the top-level logic constraints
 * corresponding to C.  Then, this strategy guarantees that there is no clause
 * c in C such that F(C - c) is a strict subset of F(C). Furthermore, it also
 * guarantees that for all f in F(C), F(C) - f is satisfiable.  This is a stronger
 * guarantee than that of {@linkplain HybridStrategy}.  In general, using this strategy
 * is more expensive, timewise, than using {@linkplain HybridStrategy}.
 * 
 * <p>This strategy will work properly only on CNFs generated by the kodkod {@linkplain Translator}. </p>
 * @author Emina Torlak
 * @see HybridStrategy
 */
public class MinTopStrategy implements ReductionStrategy {
	private final IntSet topVars, varsToTry;

	/**
	 * Constructs a min top strategy that will use the given translation
	 * log to relate the cnf clauses back to the logic constraints from 
	 * which they were generated. 
	 */
	public MinTopStrategy(final TranslationLog log) {
		topVars = StrategyUtils.topVars(log);
		varsToTry = new IntBitSet(topVars.max()+1);
		varsToTry.addAll(topVars);
	}
	
	/**
	 * {@inheritDoc}
	 * @see kodkod.engine.satlab.ReductionStrategy#next(kodkod.engine.satlab.ResolutionTrace)
	 */
	public IntSet next(ResolutionTrace trace) {
		if (varsToTry.isEmpty()) return Ints.EMPTY_SET; // tried everything
		
		final IntSet core = trace.core();
		final IntSet irrelevantVars = new IntBitSet(maxVariable(trace)+1);
		irrelevantVars.addAll(topVars);
		irrelevantVars.removeAll(StrategyUtils.maxCoreVars(trace));
		
		for(Iterator<Clause> iter = trace.iterator(core); iter.hasNext();) {
			Clause clause = iter.next();
			int maxVar = clause.maxVariable();
			if (varsToTry.remove(maxVar)) {
				// add maxVar to the set of irrelevant variables
				irrelevantVars.add(maxVar);
				// get all axioms and resolvents corresponding to the clauses that
				// form the translations of formulas other than the ones idenitified by irrelevant vars
				IntSet relevant = allBut(trace, irrelevantVars); 
				if (!relevant.isEmpty()) {
					return relevant;
//					if (solve(trace, relevant)) {
//						irrelevantVars.remove(maxVar);
//					}
						
				}  else { // must keep max var
					irrelevantVars.remove(maxVar);
				}
			}
		}
		
		varsToTry.clear();		
		return Ints.EMPTY_SET;//allBut(trace, irrelevantVars);
	}
	
	/**
	 * Returns the maximum variable occuring in the given trace.
	 * This method assumes that the axioms in the given trace were generated by the Kodkod
	 * {@linkplain Translator}.
	 * @return trace.get(trace.axioms().max()).maxVariable()
	 */
	private static int maxVariable(ResolutionTrace trace) {
		return trace.get(trace.axioms().max()).maxVariable();
	}
	
//	/**
//	 * Returns true if trace.elts[clauses] is sat, otherwise returns false.
//	 * @return true iff trace.elts[clauses] is sat
//	 */
//	private static boolean solve(ResolutionTrace trace, IntSet clauses) {
//		final SATSolver solver = SATFactory.MiniSat.instance();
//		solver.addVariables(maxVariable(trace));
//		for(Iterator<Clause> itr = trace.iterator(clauses); itr.hasNext(); ) {
//			if (!solver.addClause(itr.next().toArray())) {
//				throw new AssertionError("could not add relevant clause");
//			}
//		}
//		return solver.solve();
//	}
	
	
	/**
	 * Returns the indices of all axioms and resolvents
	 * in the given trace that form the translations of formulas other than the ones 
	 * identified by the given variables.  This method assumes that
	 * the axioms in the given trace were generated by the Kodkod
	 * {@linkplain Translator}.
	 * @return 
	 * let C = { c: trace.prover.clauses | c.maxVariable() !in excludedVars },
	 *     T = { c1, c2: C | c2.maxVariable() in abs(c1.literals) },
	 *     A = trace.elts[trace.prover.numberOfClauses()-1].*T | 
	 *     trace.backwardReachable(A) - trace.backwardReachable(trace.axioms() - A)
	 */
	private  IntSet allBut(ResolutionTrace trace, IntSet excludedVars) {
		final IntSet axioms = trace.axioms();
		
		final Iterator<Clause> itr = trace.reverseIterator(axioms);
		
		Clause clause = itr.next();
		assert clause.size()==1;
		if (excludedVars.contains(clause.maxVariable())) return Ints.EMPTY_SET;
		
		final IntSet reachableVars = new IntBitSet(clause.maxVariable()+1);
		reachableVars.add(clause.maxVariable());

		final IntSet irrelevantAxioms = new IntBitSet(axioms.size());
		final IntSet relevantAxioms = new IntBitSet(axioms.size());
		relevantAxioms.add(axioms.max());
		
		for(int i = axioms.max()-1; i >= 0; i--) {
			clause = itr.next();
			if (reachableVars.contains(clause.maxVariable())) {
				for(IntIterator lits = clause.literals(); lits.hasNext(); ) {
					int var = StrictMath.abs(lits.next());
					if (!excludedVars.contains(var)) { 
						reachableVars.add(var);
					}
				}
				relevantAxioms.add(i);
			} else {
				irrelevantAxioms.add(i);
			}
		}
		
		final IntSet relevant = trace.backwardReachable(relevantAxioms);
		relevant.removeAll(trace.backwardReachable(irrelevantAxioms));

		return relevant;
	}
}
