/* 
 * Kodkod -- Copyright (c) 2005-2008, Emina Torlak
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package kodkod.engine.ucore;

import java.util.Iterator;

import kodkod.engine.fol2sat.TranslationLog;
import kodkod.engine.fol2sat.Translator;
import kodkod.engine.satlab.Clause;
import kodkod.engine.satlab.ReductionStrategy;
import kodkod.engine.satlab.ResolutionTrace;
import kodkod.util.ints.IntBitSet;
import kodkod.util.ints.IntIterator;
import kodkod.util.ints.IntSet;
import kodkod.util.ints.Ints;

/**
 * A strategy for generating unsat cores that are minimal at the logic level.  
 * Specifically, let C be a core that is minimal according to this strategy, 
 * and let F(C) be the top-level logic constraints
 * corresponding to C.  Then, this strategy guarantees that there is no clause
 * c in C such that F(C - c) is a strict subset of F(C). Furthermore, it also
 * guarantees that for all f in F(C), F(C) - f is satisfiable.  This is a stronger
 * guarantee than that of {@linkplain HybridStrategy}.  In general, using this strategy
 * is more expensive, timewise, than using {@linkplain HybridStrategy}.
 * 
 * <p>This strategy will work properly only on CNFs generated by the kodkod {@linkplain Translator}. </p>
 * @author Emina Torlak
 * @see HybridStrategy
 */
public final class SCEStrategy implements ReductionStrategy {
	private final IntSet rootVars, varsToTry;

	/**
	 * Constructs an SCE strategy that will use the given translation
	 * log to relate the cnf clauses back to the logic constraints from 
	 * which they were generated. 
	 */
	public SCEStrategy(final TranslationLog log) {
		rootVars = StrategyUtils.rootVars(log);
		varsToTry = new IntBitSet(rootVars.max()+1);
		varsToTry.addAll(rootVars);

	}
	/**
	 * {@inheritDoc}
	 * @see kodkod.engine.satlab.ReductionStrategy#next(kodkod.engine.satlab.ResolutionTrace)
	 */
	public IntSet next(ResolutionTrace trace) {
		if (varsToTry.isEmpty()) return Ints.EMPTY_SET; // tried everything
		final IntSet core = trace.core();
		final IntSet relevantVars = StrategyUtils.coreTailUnits(trace);
		
		for(Iterator<Clause> iter = trace.reverseIterator(core); iter.hasNext();) {
			Clause clause = iter.next();
			int maxVar = clause.maxVariable();
			if (varsToTry.remove(maxVar)) {
				// remove maxVar from the set of relevant variables
				relevantVars.remove(maxVar);
				if (relevantVars.isEmpty()) break; // there was only root formula left
				// get all axioms corresponding to the clauses that
				// form the translations of formulas identified by relevant vars
				IntSet relevantClauses = clausesFor(trace, relevantVars); 
				assert !relevantClauses.isEmpty() && !relevantClauses.contains(trace.size()-1);
				return relevantClauses;
			}
		}
		
		varsToTry.clear();		
		return Ints.EMPTY_SET;
	}
	

	/**
	 * Returns the indices of all axioms
	 * in the given trace that form the translations of the formulas
	 * identified by the given variables.  This method assumes that
	 * the axioms in the given trace were generated by the Kodkod
	 * {@linkplain Translator}.
	 * @return 
	 * let C = { c: trace.prover.clauses | c.maxVariable() in relevantVars },
	 *     T = { c1, c2: C | c2.maxVariable() in abs(c1.literals) } |
	 *     C.*T 
	 */
	private IntSet clausesFor(ResolutionTrace trace, IntSet relevantVars) { 
//		System.out.println("relevant: " + relevantVars);
		final IntSet axioms = trace.axioms();

		final IntSet reachableVars = new IntBitSet(relevantVars.max()+1);
		reachableVars.addAll(relevantVars);

		final IntSet relevantAxioms = new IntBitSet(axioms.size());
		
		final Iterator<Clause> itr = trace.reverseIterator(axioms);
		for(int i = axioms.max(); i >= 0; i--) {
			Clause clause = itr.next();
			int maxVar = clause.maxVariable(), size = clause.size();
			if ((size>1 && reachableVars.contains(maxVar)) || (size==1 && relevantVars.contains(maxVar))) {
				for(IntIterator lits = clause.literals(); lits.hasNext(); ) {
					reachableVars.add(StrictMath.abs(lits.next()));
				}
				relevantAxioms.add(i);
			} 
		}
		
		return  relevantAxioms;
	}

}
