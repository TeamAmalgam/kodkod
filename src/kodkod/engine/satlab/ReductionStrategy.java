/**
 * 
 */
package kodkod.engine.satlab;

import java.util.Set;

/**
 * Strategy for reducing the unsatisfiable core of
 * a given {@link ResolutionTrace}.  Let T be a {@link ResolutionTrace} 
 * generated by the {@link SATProver} P, and let C be a reduction strategy.  
 * P's core reduction algorithm uses the strategy C as follows:
 * <pre>
 * while (!C.next(T).isEmpty()) {
 *  let P' be a SATProver with no variables and clauses
 *  add P.numberOfVariables() variables to P'
 *  P'.clauses = C.next(T)
 *  if (!P'.solve()) {
 *   T = P'.proof()
 *  }
 * }
 * </pre>
 * @author Emina Torlak
 */
public interface ReductionStrategy {

	/**
	 * Returns the next subset of clauses in the given trace to be analyzed.   
	 * If there are no more subsets to be analyzed (i.e. the given trace is 
	 * minimal according to the minimality measure used by this strategy),
	 * returns the empty set.  
	 * @return the next subset of clauses in the given trace to be analyzed.   
	 */
	public Set<Clause> next(ResolutionTrace trace);
	
}
