/* 
 * Kodkod -- Copyright (c) 2005-2007, Emina Torlak
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package kodkod.engine.satlab;

import java.util.Set;


/**
 * Strategy for reducing the unsatisfiable core of
 * a given {@link ResolutionTrace}.  Let T be a {@link ResolutionTrace} 
 * generated by the {@link SATProver} P, and let C be a reduction strategy.  
 * P's core reduction algorithm uses the strategy C as follows:
 * <pre>
 * for (Set<Clause> next = C.next(T); !next.isEmpty(); next = C.next(T)) {
 *  let P' be a SATProver with no variables and clauses
 *  add P.numberOfVariables() variables to P'
 *  P'.clauses = next
 *  if (!P'.solve()) {
 *   T = P'.proof()
 *  }
 * }
 * </pre>
 * @specfield traces: [0..)->ResolutionTrace
 * @specfield nexts: [0..)->Set<Clause>
 * @invariant traces.ResolutionTrace = nexts.Set<Clause>
 * @invariant all i: [1..) | some traces[i] => some traces[i-1]
 * @invariant all i: [0..#nexts) | nexts[i] in traces[i].conflict.^antecedents
 * @invariant no disj i,j: [0..#nexts) | traces[i] = traces[j] && nexts[i] = nexts[j]
 * @author Emina Torlak
 */
public interface ReductionStrategy {

	/**
	 * Returns the next subset of clauses in the given trace to be analyzed.   
	 * If there are no more subsets to be analyzed (i.e. the given trace is 
	 * minimal according to the minimality measure used by this strategy),
	 * returns the empty set.
	 * @requires some this.traces && unsat(last(this.nexts)) => trace.core in last(this.traces).core
	 * @requires some this.traces && sat(last(this.nexts)) => trace = last(this.trace)
	 * @effects 
	 * <pre> 
	 * last(this.nexts).isEmpty() => 
	 *  this.traces' = this.traces and 
	 *  this.nexts' = this.nexts 
	 * else
	 *  this.traces' = this.traces + #this.traces->trace and
	 *  this.nexts' = this.nexts + #this.nexts->{ c: Clause | c in trace.conflict.^antecedents } and
	 *  all i: this.traces.trace | this.nexts'[i] != last(this.nexts')
	 * </pre>
	 * @return last(this.nexts')
	 */
	public Set<Clause> next(ResolutionTrace trace);
	
}
